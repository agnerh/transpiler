#include "keywords.h"

const std::unordered_map<std::string, TokenType> reserved_keywords = {
    {"abstract", TokenType::ABSTRACT},
    {"as", TokenType::AS},
    {"asserts", TokenType::ASSERTS},
    {"async", TokenType::ASYNC},
    {"await", TokenType::AWAIT},
    {"break", TokenType::BREAK},
    {"case", TokenType::CASE},
    {"catch", TokenType::CATCH},
    {"class", TokenType::CLASS_DECLARATION},
    {"const", TokenType::CONST},
    {"continue", TokenType::CONTINUE},
    {"debugger", TokenType::DEBUGGER},
    {"declare", TokenType::DECLARE},
    {"default", TokenType::DEFAULT},
    {"delete", TokenType::DELETE},
    {"do", TokenType::DO},
    {"else", TokenType::ELSE_STATEMENT},
    {"enum", TokenType::ENUM},
    {"export", TokenType::EXPORT},
    {"extends", TokenType::EXTENDS},
    {"false", TokenType::FALSE_},
    {"finally", TokenType::FINALLY},
    {"for", TokenType::FOR_LOOP},
    {"from", TokenType::FROM},
    {"function", TokenType::FUNCTION_DECLARATION},
    {"get", TokenType::GET},
    {"if", TokenType::IF_STATEMENT},
    {"implements", TokenType::IMPLEMENTS},
    {"import", TokenType::IMPORT},
    {"in", TokenType::IN},
    {"infer", TokenType::INFER},
    {"instanceof", TokenType::INSTANCEOF},
    {"interface", TokenType::INTERFACE_DECLARATION},
    {"is", TokenType::IS},
    {"keyof", TokenType::KEYOF},
    {"let", TokenType::LET},
    {"module", TokenType::MODULE},
    {"namespace", TokenType::NAMESPACE},
    {"never", TokenType::NEVER},
    {"new", TokenType::NEW},
    {"null", TokenType::NULL_},
    {"of", TokenType::OF},
    {"package", TokenType::PACKAGE},
    {"private", TokenType::PRIVATE},
    {"protected", TokenType::PROTECTED},
    {"public", TokenType::PUBLIC},
    {"readonly", TokenType::READONLY},
    {"require", TokenType::REQUIRE},
    {"return", TokenType::RETURN},
    {"set", TokenType::SET},
    {"static", TokenType::STATIC},
    {"string", TokenType::STRING},
    {"super", TokenType::SUPER},
    {"switch", TokenType::SWITCH_STATEMENT},
    {"symbol", TokenType::SYMBOL},
    {"this", TokenType::THIS},
    {"throw", TokenType::THROW},
    {"true", TokenType::TRUE_},
    {"try", TokenType::TRY},
    {"type", TokenType::TYPE},
    {"typeof", TokenType::TYPEOF},
    {"undefined", TokenType::UNDEFINED},
    {"unique", TokenType::UNIQUE},
    {"unknown", TokenType::UNKNOWN},
    {"var", TokenType::VAR},
    {"void", TokenType::VOID},
    {"while", TokenType::WHILE_LOOP},
    {"with", TokenType::WITH},
    {"yield", TokenType::YIELD}
};