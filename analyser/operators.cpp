#include "operators.h"

const std::unordered_map<std::string, TokenType> operators = {
    {"+", TokenType::PLUS},
    {"-", TokenType::MINUS},
    {"*", TokenType::MULTIPLY},
    {"/", TokenType::DIVIDE},
    {"%", TokenType::MODULUS},
    {"**", TokenType::EXPONENTIATION},
    {"++", TokenType::INCREMENT},
    {"--", TokenType::DECREMENT},
    {"=", TokenType::ASSIGN},
    {"+=", TokenType::PLUS_ASSIGN},
    {"-=", TokenType::MINUS_ASSIGN},
    {"*=", TokenType::MULTIPLY_ASSIGN},
    {"/=", TokenType::DIVIDE_ASSIGN},
    {"%=", TokenType::MODULUS_ASSIGN},
    {"**=", TokenType::EXPONENTIATION_ASSIGN},
    {"==", TokenType::EQUALS},
    {"!=", TokenType::NOT_EQUALS},
    {"===", TokenType::STRICT_EQUALS},
    {"!==", TokenType::STRICT_NOT_EQUALS},
    {".", TokenType::DOT},
    {"...", TokenType::SPEAD},
    {";", TokenType::SEMICOLON},
    {">", TokenType::GREATER_THAN},
    {"<", TokenType::LESS_THAN},
    {">=", TokenType::GREATER_EQUAL},
    {"<=", TokenType::LESS_EQUAL},
    {"&&", TokenType::LOGICAL_AND},
    {"||", TokenType::LOGICAL_OR},
    {"!", TokenType::LOGICAL_NOT},
    {"&", TokenType::BITWISE_AND},
    {"|", TokenType::BITWISE_OR},
    {"^", TokenType::BITWISE_XOR},
    {"~", TokenType::BITWISE_NOT},
    {"<<", TokenType::LEFT_SHIFT},
    {">>", TokenType::RIGHT_SHIFT},
    {">>>", TokenType::UNSIGNED_RIGHT_SHIFT},
    {"?", TokenType::TERNARY},
    {"?.", TokenType::OPTIONAL_CHAINING},
    {"??", TokenType::NULLISH_COALESCING}
};